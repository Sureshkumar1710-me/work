import numpy as np

def reshape_to_3d(matrix, segment_size):
    m, n = matrix.shape
    assert n == 4, "Input matrix must have 4 columns."

    # Calculate the number of full segments
    num_segments = m // segment_size

    # Calculate the number of samples to keep
    keep_size = num_segments * segment_size

    # Trim the matrix to the keep_size
    trimmed_matrix = matrix[:keep_size, :]

    # Reshape to 3D matrix of size (num_segments, segment_size, 4)
    reshaped_matrix = trimmed_matrix.reshape(num_segments, segment_size, n)

    return reshaped_matrix

# Example usage:
# Create an example matrix of size (m, 4)
m = 623983
k = 51200  # Adjust segment_size as needed
matrix = np.random.randn(m, 4).astype(np.float32)  # Example data

# Reshape the matrix to 3D
reshaped_matrix = reshape_to_3d(matrix, k)

# Print the shape of the reshaped matrix
print("Shape of reshaped matrix:", reshaped_matrix.shape)
