import numpy as np
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten

# Generate example data (replace with your actual data)
type_0_data = np.random.randn(430, 16000, 4).astype(np.float32)
type_1_data = np.random.randn(412, 16000, 4).astype(np.float32)

# Create labels
type_0_labels = np.zeros((type_0_data.shape[0], 1))
type_1_labels = np.ones((type_1_data.shape[0], 1))

# Combine the data and labels
data = np.concatenate((type_0_data, type_1_data), axis=0)
labels = np.concatenate((type_0_labels, type_1_labels), axis=0)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)

# Build the DNN model
model = Sequential([
    Flatten(input_shape=(16000, 4)),
    Dense(128, activation='relu'),
    Dense(64, activation='relu'),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid')  # Binary classification
])

# Compile the model
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Train the model
history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)

# Evaluate the model
loss, accuracy = model.evaluate(X_test, y_test)
print(f'Test accuracy: {accuracy:.4f}')

# Optional: Plot the training history
import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0, 1])
plt.legend(loc='lower right')
plt.show()
